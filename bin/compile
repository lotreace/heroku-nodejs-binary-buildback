#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
if [ -z "$NODE_VERSION" ]; then
  NODE_VERSION='0.10.13'
fi

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function tar_download() {
  url="$1"
  location="$2"

  mkdir -p $location
  curl $url -s -o - | tar xzf - -C $location
}

# downloading node
#echo "-----> Downloading node"
#tar_download http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz $BUILD_DIR
#mv $BUILD_DIR/node-v$NODE_VERSION-linux-x64 $BUILD_DIR/node
#chmod +x $BUILD_DIR/node/bin/*

#adding node to the build's $PATH
PATH=$PATH:$BUILD_DIR/node/bin
#echo "node version $NODE_VERSION has been installed" | indent

# install dependencies with npm
echo "-----> Installing dependencies with npm"
cd $BUILD_DIR

#dealing with custom package.json file
if [ "$ALTERNATE_PACKAGE_JSON" ]; then
  echo "-----> Using altenate package.json file: $ALTERNATE_PACKAGE_JSON" 
  mv $ALTERNATE_PACKAGE_JSON package.json
fi

npm install --production
echo "Dependencies installed" | indent

echo "-----> Building runtime environment"
mkdir -p $BUILD_DIR/.profile.d
echo "export PATH=\"\$HOME/node/bin:$HOME/bin:\$HOME/node_modules/.bin:\$PATH\"" > $BUILD_DIR/.profile.d/nodejs.sh
